# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Restart Yabai
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# create a window: open terminal
# hyper - return : ~/.config/yabai/scripts/open_iterm2.sh
ctrl + cmd - return : /Applications/Alacritty.app/Contents/MacOS/alacritty
ctrl + cmd - t : /System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
ctrl + cmd - n : yabai -m space --create && \
                 index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                 yabai -m window --space "${index}" && \
                 yabai -m space --focus "${index}"

# focus window
shift + alt - h : yabai -m window --focus west
shift + alt - j : yabai -m window --focus south
shift + alt - k : yabai -m window --focus north
shift + alt - l : yabai -m window --focus east

# move managed window
ctrl + shift + alt - h : yabai -m window --warp west
ctrl + shift + alt - j : yabai -m window --warp south
ctrl + shift + alt - k : yabai -m window --warp north
ctrl + shift + alt - l : yabai -m window --warp east

# swap managed window
shift + ctrl + cmd - h : yabai -m window --swap west
shift + ctrl + cmd - j : yabai -m window --swap south
shift + ctrl + cmd - k : yabai -m window --swap north
shift + ctrl + cmd - l : yabai -m window --swap east

# fast focus desktop
shift + alt - 0 : yabai -m space --focus recent
shift + alt - 1 : yabai -m space --focus 1
shift + alt - 2 : yabai -m space --focus 2
shift + alt - 3 : yabai -m space --focus 3
shift + alt - 4 : yabai -m space --focus 4
shift + alt - 5 : yabai -m space --focus 5
shift + alt - 6 : yabai -m space --focus 6
shift + alt - 7 : yabai -m space --focus 7
shift + alt - 8 : yabai -m space --focus 8
shift + alt - 9 : yabai -m space --focus 9

# send(move) window to desktop and follow focus
ctrl + shift + alt - 0 : yabai -m window --space recent; yabai -m space --focus recent
ctrl + shift + alt - 1 : yabai -m window --space  1; yabai -m space --focus 1
ctrl + shift + alt - 2 : yabai -m window --space  2; yabai -m space --focus 2
ctrl + shift + alt - 3 : yabai -m window --space  3; yabai -m space --focus 3
ctrl + shift + alt - 4 : yabai -m window --space  4; yabai -m space --focus 4
ctrl + shift + alt - 5 : yabai -m window --space  5; yabai -m space --focus 5
ctrl + shift + alt - 6 : yabai -m window --space  6; yabai -m space --focus 6
ctrl + shift + alt - 7 : yabai -m window --space  7; yabai -m space --focus 7
ctrl + shift + alt - 8 : yabai -m window --space  8; yabai -m space --focus 8
ctrl + shift + alt - 9 : yabai -m window --space  9; yabai -m space --focus 9

# focus monitor
shift + alt - u  : yabai -m display --focus recent
shift + alt - q  : yabai -m display --focus 2
shift + alt - w  : yabai -m display --focus 3
shift + alt - e  : yabai -m display --focus 1

# send(move) window to monitor and follow focus
ctrl + shift + alt - u  : yabai -m window --display recent; yabai -m display --focus recent
ctrl + shift + alt - q  : yabai -m window --display 2; yabai -m display --focus 2
ctrl + shift + alt - w  : yabai -m window --display 3; yabai -m display --focus 3
ctrl + shift + alt - e  : yabai -m window --display 1; yabai -m display --focus 1

# balance size of windows
shift + cmd - 0 : yabai -m space --balance

# make floating window fill screen
shift + cmd - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + cmd - left   : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
shift + cmd - right  : yabai -m window --grid 1:2:1:0:1:1

# move floating window
shift + cmd - h : yabai -m window --move rel:-20:0
shift + cmd - l : yabai -m window --move rel:20:0
shift + cmd - k : yabai -m window --move rel:0:-20
shift + cmd - j : yabai -m window --move rel:0:20

# increase window size
alt + cmd - h : yabai -m window --resize left:-20:0
alt + cmd - l : yabai -m window --resize right:20:0
alt + cmd - k : yabai -m window --resize top:0:-20
alt + cmd - j : yabai -m window --resize bottom:0:20

# decrease window size
ctrl + alt - h : yabai -m window --resize left:20:0
ctrl + alt - l : yabai -m window --resize right:-20:0
ctrl + alt - k : yabai -m window --resize top:0:20
ctrl + alt - j : yabai -m window --resize bottom:0:-20

# set insertion point in focused container
ctrl + alt - h : yabai -m window --insert west
ctrl + alt - j : yabai -m window --insert south
ctrl + alt - k : yabai -m window --insert north
ctrl + alt - l : yabai -m window --insert east

# Resize width of a window
ctrl + cmd - h : \
    yabai -m window --resize left:-20:0 ; \
    yabai -m window --resize right:-20:0

ctrl + cmd - l : \
    yabai -m window --resize right:20:0 ; \
    yabai -m window --resize left:20:0

# Resize height of a window
ctrl + cmd - j : \
    yabai -m window --resize bottom:0:20 ; \
    yabai -m window --resize top:0:20

ctrl + cmd - k : \
    yabai -m window --resize top:0:-20 ; \
    yabai -m window --resize bottom:0:-20

# Equalize size of windows in desktop (0x18 --> '=')
ctrl + cmd - 0    : yabai -m space --balance
ctrl + cmd - 0x18 : yabai -m space --balance

# rotate tree(逆时针旋转空间多个窗口)
shift + alt - r : yabai -m space --rotate 90

# mirror tree x-axis(横轴调换窗口)
shift + alt - x : yabai -m space --mirror x-axis

# mirror tree y-axis(纵轴调换窗口)
shift + alt - y : yabai -m space --mirror y-axis

# toggle desktop offset
ctrl + cmd - a : yabai -m space --toggle padding; yabai -m space --toggle gap

# toggle window border
ctrl + cmd - b : yabai -m window --toggle border

# toggle window zoom
ctrl + cmd - d : yabai -m window --toggle zoom-parent
ctrl + cmd - f : yabai -m window --toggle zoom-fullscreen

# toggle sticky(+float), topmost, picture-in-picture
ctrl + cmd - p : yabai -m window --toggle sticky;\
                                 --toggle topmost;\
                                 --toggle border;\
                                 --toggle pip

# toggle topmost (keep above other windows)
ctrl + cmd - o : yabai -m window --toggle topmost

# toggle window native fullscreen(单个窗口进入或退出真全屏-上方的icon都会消失)
# ctrl + alt + cmd  - f : yabai -m window --toggle native-fullscreen

# toggle window split type 【切換排版方式：上下／左右】
ctrl + alt + cmd - e : yabai -m window --toggle split

# toggle sticky (show on all spaces) 【作用中視窗變成浮動視窗；非作用中的其它視窗居其下】
ctrl + alt + cmd - s : yabai -m window --toggle sticky

# float / unfloat window and center on screen
# The grid format is <rows>:<cols>:<start-x>:<start-y>:<width>:<height>, where rows and
# cols are how many rows and columns there are in total, start-x and start-y are the start
# indices for the row and column and width and height are how many rows and columns the
# window spans.
# ctrl + alt + cmd - t : yabai -m window --toggle float --grid 4:4:1:1:2:2
# ctrl + alt + cmd - t : yabai -m window --toggle float --grid 1:3:0:0:2:1
# ctrl + alt + cmd - t : yabai -m window --toggle float --grid 1:3:0:0:2:1
# ctrl + alt + cmd - t : yabai -m window --toggle float --grid 4:8:1:1:6:2
ctrl + alt + cmd - t : yabai -m window --toggle float --grid 6:8:1:1:6:4

# change layout of desktop (切換排版方式)
ctrl + shift + alt + cmd - b : yabai -m space --layout bsp
ctrl + shift + alt + cmd - f : yabai -m space --layout float
